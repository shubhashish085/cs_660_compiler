package Parser;

import Scanner.Scanner;
import AST.*;
import Utilities.Error;


/* Java 1.2 parser for CUP.  
 * Copyright (C) 1998 C. Scott Ananian <cananian@alumni.princeton.edu>
 * This program is released under the terms of the GPL; see the file
 * COPYING for more details.  There is NO WARRANTY on this code.
 */

parser code  {: 
  public Scanner lexer;

  public parser(Scanner l) {
    this();
    lexer=l;
  }

  public void syntax_error(java_cup.runtime.Symbol current) {
    if(current.value == null) {
      System.out.println("Unexpected end of file." + Scanner.curLine);
      System.exit(1);
    }	
    else {
      Token t = (Token)current.value;
	System.out.println(Error.fileName + ":" + Scanner.lineCount + ": Syntax error:\n\n" + Scanner.curLine);
	for (int i=1; i<Scanner.curLine.length()+1-t.getLexeme().length(); i++) 
	  System.out.print(" ");
        System.out.println("^");

      System.exit(1);
    }
  }
:};

scan with {: return lexer.next_token(); :};

// -----------------------------------------------------------------------------
// Terminals
// -----------------------------------------------------------------------------

// Note: The order here must be that of the names[] array in Token.java

// Types
// integrals
// YOUR CODE HERE


// Keywords
terminal Token BYTE;
terminal Token CHAR;
terminal Token SHORT;
terminal Token INT;
terminal Token LONG;
terminal Token FLOAT;
terminal Token DOUBLE;
terminal Token BOOLEAN;
terminal Token STRING;
terminal Token BREAK; 		// break
terminal Token CLASS; 		// class
terminal Token CONTINUE;
terminal Token DO;
terminal Token ELSE;
terminal Token EXTENDS;
terminal Token FOR;
terminal Token IF;
terminal Token NEW;
terminal Token RETURN;
terminal Token SUPER;
terminal Token THIS;
terminal Token VOID;
terminal Token WHILE;
terminal Token CASE;
terminal Token SWITCH;
terminal Token DEFAULT;
terminal Token IMPLEMENTS;
terminal Token INTERFACE;
terminal Token IMPORT;


// YOUR CODE HERE
// Modifiers

terminal Token PUBLIC;
terminal Token PRIVATE;
terminal Token STATIC;
terminal Token FINAL;
terminal Token ABSTRACT;

// YOUR CODE HERE
// Literals and Identifiers

terminal Token BOOLEAN_LITERAL;
terminal Token FLOAT_LITERAL;
terminal Token DOUBLE_LITERAL;
terminal Token IDENTIFIER;
terminal Token INTEGER_LITERAL;
terminal Token LONG_LITERAL;
terminal Token NULL_LITERAL;
terminal Token STRING_LITERAL;
terminal Token CHARACTER_LITERAL;

// YOUR CODE HERE


// Operators

terminal Token EQ;
terminal Token LT;
terminal Token GT;
terminal Token LTEQ;
terminal Token GTEQ;
terminal Token PLUSPLUS;
terminal Token MINUSMINUS;
terminal Token PLUS;
terminal Token MINUS;
terminal Token MULT;
terminal Token DIV;
terminal Token COMP;
terminal Token NOT;
terminal Token MOD;
terminal Token EQEQ;
terminal Token NOTEQ;
terminal Token AND;
terminal Token XOR;
terminal Token OR;
terminal Token ANDAND;
terminal Token OROR;
terminal Token LSHIFT;
terminal Token RSHIFT;
terminal Token RRSHIFT;
terminal Token INSTANCEOF;
terminal Token MULTEQ;
terminal Token DIVEQ;
terminal Token PLUSEQ;
terminal Token MINUSEQ;
terminal Token MODEQ;
terminal Token XOREQ;
terminal Token LSHIFTEQ;
terminal Token RSHIFTEQ;
terminal Token RRSHIFTEQ;
terminal Token ANDEQ;
terminal Token OREQ;

// YOUR CODE HERE

// Misc
terminal Token SEMICOLON;
terminal Token COLON;
terminal Token COMMA;
terminal Token DOT;
terminal Token QUEST;

// YOUR CODE HERE

// Brackets

terminal Token LBRACE;
terminal Token RBRACE;
terminal Token LPAREN;
terminal Token RPAREN;
terminal Token LBRACK;
terminal Token RBRACK;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// Non terminals
// -----------------------------------------------------------------------------

// Note: Order doesn't matter, but do it in the same blocks as in the grammar.

// 19.2) The Syntactic Grammar
non terminal AST goal;

// 19.3) Lexical Structure

non terminal AST literal;

// YOUR CODE HERE

// 19.4) Types, Values, and Variables

non terminal AST type;
non terminal AST primitive_type;
non terminal AST reference_type;
non terminal AST class_or_interface_type;
non terminal AST class_type;
non terminal AST interface_type;
non terminal AST array_type;

// YOUR CODE HERE

// 19.5) Names

non terminal AST name;

// YOUR CODE HERE

// 19.6) Packages

non terminal AST compilation_unit;
non terminal AST import_declarations_opt;
non terminal AST import_declarations ;
non terminal AST import_declaration;
non terminal AST type_declarations_opt;
non terminal AST type_declarations ;
non terminal AST type_declaration;

// YOUR CODE HERE
 
// 19.7) Productions used only in the LALR(1) grammar

non terminal AST modifiers;
non terminal AST modifier;
non terminal AST modifiers_opt;

// YOUR CODE HERE

// 19.8) Classes
// 19.8.1) Class Declaration

non terminal AST class_declaration;
non terminal AST super_opt;
non terminal AST super;
non terminal AST interfaces_opt;
non terminal AST interfaces;
non terminal AST interface_type_list;
non terminal AST class_body;
non terminal AST class_body_declarations_opt;
non terminal AST class_body_declarations;
non terminal AST class_body_declaration;

// YOUR CODE HERE

// 19.8.2) Field Declarations

non terminal AST field_declaration;
non terminal AST variable_declarators;
non terminal AST variable_declarator;
non terminal AST variable_declarator_id;
non terminal AST variable_initializer;

// YOUR CODE HERE

// 19.8.3) Method Declarations

non terminal AST method_declaration;
non terminal AST method_body;
non terminal AST formal_parameter_list_opt;
non terminal AST formal_parameter_list;
non terminal AST formal_parameter;

// YOUR CODE HERE

// 19.8.4) Static Initializers

non terminal AST static_initializer;

// YOUR CODE HERE

// 19.8.5) Constructor Declarations

non terminal AST constructor_declaration;
non terminal AST constructor_body;
non terminal AST explicit_constructor_invocation;

// YOUR CODE HERE

// 19.9) Interfaces
// 19.9.1) Interface Declarations

non terminal AST interface_declaration;
non terminal AST extends_interfaces_opt;
non terminal AST extends_interfaces;
non terminal AST interface_body;
non terminal AST interface_member_declarations_opt;
non terminal AST interface_member_declarations;
non terminal AST interface_member_declaration;
non terminal AST constant_declaration;
non terminal AST abstract_method_declaration;

// YOUR CODE HERE

// 19.10) Arrays

non terminal AST array_initializer;
non terminal AST variable_initializers_opt;
non terminal AST variable_initializers;

// YOUR CODE HERE

// 19.11) Blocks and Statements

non terminal AST block;
non terminal AST block_statements_opt;
non terminal AST block_statements;
non terminal AST block_statement;
non terminal AST local_variable_declaration;
non terminal AST statement;
non terminal AST statement_no_short_if;
non terminal AST statement_without_trailing_substatement;
non terminal AST empty_statement;
non terminal AST expression_statement;
non terminal AST statement_expression;
non terminal AST if_then_statement;
non terminal AST if_then_else_statement;
non terminal AST if_then_else_statement_no_short_if;
non terminal AST do_statement;
non terminal AST switch_statement;
non terminal AST switch_block;
non terminal AST switch_block_statement_groups_opt;
non terminal AST switch_block_statement_groups;
non terminal AST switch_block_statement_group;
non terminal AST switch_labels;
non terminal AST switch_label;
non terminal AST while_statement;
non terminal AST while_statement_no_short_if;
non terminal AST for_statement;
non terminal AST for_statement_no_short_if;
non terminal AST for_init_opt;
non terminal AST for_init;
non terminal AST for_update_opt;
non terminal AST for_update;
non terminal AST statement_expression_list;
non terminal AST break_statement;
non terminal AST continue_statement;
non terminal AST return_statement;

// YOUR CODE HERE

// 19.12) Expressions

non terminal AST primary;
non terminal AST primary_no_new_array;
non terminal AST class_instance_creation_expression;
non terminal AST argument_list_opt;
non terminal AST argument_list;
non terminal AST array_creation_expression;
non terminal AST dim_exprs;
non terminal AST dim_expr;
non terminal AST dims_opt;
non terminal AST dims;
non terminal AST field_access;
non terminal AST method_invocation;
non terminal AST array_access;
non terminal AST postfix_expression;
non terminal AST post_increment_expression;
non terminal AST post_decrement_expression;
non terminal AST unary_expression;
non terminal AST pre_increment_expression;
non terminal AST pre_decrement_expression;
non terminal AST unary_expression_not_plus_minus;
non terminal AST cast_expression;
non terminal AST multiplicative_expression;
non terminal AST additive_expression;
non terminal AST shift_expression;
non terminal AST relational_expression;
non terminal AST equality_expression;
non terminal AST and_expression;
non terminal AST exclusive_or_expression;
non terminal AST inclusive_or_expression;
non terminal AST conditional_and_expression;
non terminal AST conditional_or_expression;
non terminal AST conditional_expression;
non terminal AST assignment_expression;
non terminal AST assignment;
non terminal AST assignment_operator;
non terminal AST left_hand_side;
non terminal AST expression_opt;
non terminal AST expression;
non terminal AST constant_expression;

// YOUR CODE HERE

start with goal;

// -----------------------------------------------------------------------------
// 19.2) The Syntactic Grammar
// -----------------------------------------------------------------------------

goal ::=	compilation_unit
	;
// -----------------------------------------------------------------------------
// 19.3) Lexical Structure.
// -----------------------------------------------------------------------------

literal ::=	
		INTEGER_LITERAL
	|       LONG_LITERAL
	|       FLOAT_LITERAL
	|       DOUBLE_LITERAL
	|	BOOLEAN_LITERAL
	|	STRING_LITERAL
	|	NULL_LITERAL
	|       CHARACTER_LITERAL
	;

// -----------------------------------------------------------------------------
// 19.4) Types, Values, and Variables
// -----------------------------------------------------------------------------

type	::=	primitive_type 	 
	    |	reference_type
        ;

primitive_type ::= BOOLEAN
	            |  BYTE
	            |  SHORT
	            |  INT
	            |  LONG
	            |  FLOAT
	            |  DOUBLE
	            |  CHAR
	            |  STRING
                ; 


reference_type ::=		class_or_interface_type	
	            |	array_type
                ;			

class_or_interface_type ::=		name;

class_type ::=  class_or_interface_type  ;

interface_type ::=	class_or_interface_type ;

array_type ::=    primitive_type dims	        
	|	name dims ;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.5) Names
// -----------------------------------------------------------------------------

name	::=	IDENTIFIER ;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.6) Packages
// -----------------------------------------------------------------------------

compilation_unit   ::= import_declarations_opt	type_declarations_opt
                    ;

import_declarations_opt ::=		import_declarations
   	                    |       /* Epsilon */
                        ; 		      

import_declarations     ::=  import_declaration		
	                    |	import_declarations import_declaration
                        ; 
	
import_declaration ::=    IMPORT name SEMICOLON
                    ;
        

type_declarations_opt ::=	type_declarations 	   
	                    |	/* Epsilon */
                        ;          	 

type_declarations ::=		type_declaration  	
	                |	type_declarations type_declaration
                    ; 

type_declaration ::=		class_declaration    	
	              |	interface_declaration
                  ; 


// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.7) Productions used only in the LALR(1) grammar
// -----------------------------------------------------------------------------

modifiers_opt ::= 	modifiers        
	            |       /* Epsilon */
                ;             

modifiers ::=       modifier              
	        |	modifiers modifier 
            ;

modifier ::=		PUBLIC
	      |	PRIVATE
	      |	STATIC
	      |	FINAL
	      |	ABSTRACT
          ;


// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.8) Classes
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// 19.8.1) Class Declaration:
// -----------------------------------------------------------------------------

class_declaration ::=
		modifiers_opt CLASS name super_opt interfaces_opt class_body ;

super_opt ::=
		super			
	|       /* Epsilon */	;	

super ::=         EXTENDS class_type ;		

interfaces_opt ::=
		interfaces				
	|	/* Epsilon */  ;		

interfaces ::=
		IMPLEMENTS interface_type_list  ; 

interface_type_list ::=
		interface_type
	|	interface_type_list COMMA interface_type  ;
        
class_body ::=	
	    LBRACE class_body_declarations_opt RBRACE   ;

class_body_declarations_opt ::=
		class_body_declarations   
	|	/* Epsilon */  ;              

class_body_declarations ::=
		class_body_declaration   
	|	class_body_declarations class_body_declaration  ;

class_body_declaration ::=
		field_declaration       
	|	method_declaration       		
	|       static_initializer       
	|	constructor_declaration   ;  

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.8.2) Field Declarations
// -----------------------------------------------------------------------------

field_declaration ::=
		modifiers_opt type variable_declarators SEMICOLON   ;

variable_declarators ::=
		variable_declarator 	
	|	variable_declarators COMMA variable_declarator  ;

variable_declarator ::=
		variable_declarator_id
	|	variable_declarator_id EQ variable_initializer  ;

variable_declarator_id ::=
		name			
	|	variable_declarator_id LBRACK RBRACK    ;

variable_initializer ::=
		expression 		
	|	array_initializer    ;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.8.3) Method Declarations
// -----------------------------------------------------------------------------

method_declaration ::=
		modifiers_opt type name LPAREN formal_parameter_list_opt RPAREN
		method_body    
	|	modifiers_opt VOID name LPAREN formal_parameter_list_opt RPAREN
		method_body   ;    

method_body ::=
		block	
	|	SEMICOLON	      ;

formal_parameter_list_opt ::=
		formal_parameter_list 
	|	/* Epsilon */	  ;	

formal_parameter_list ::=
		formal_parameter
	|	formal_parameter_list COMMA formal_parameter    ;

formal_parameter ::=
		type variable_declarator_id   ;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.8.4) Static Initializers
// -----------------------------------------------------------------------------

static_initializer ::=  STATIC block  ;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.8.5) Constructor Declarations
// -----------------------------------------------------------------------------

constructor_declaration ::=
		modifiers_opt name LPAREN formal_parameter_list_opt RPAREN constructor_body       ;

constructor_body ::=
		LBRACE explicit_constructor_invocation block_statements RBRACE
	|	LBRACE explicit_constructor_invocation RBRACE
	|	LBRACE block_statements RBRACE
	|       LBRACE RBRACE         ;

explicit_constructor_invocation ::=
		SUPER LPAREN argument_list_opt RPAREN SEMICOLON
	|	THIS LPAREN argument_list_opt RPAREN SEMICOLON        ;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.9) Interfaces
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// 19.9.1) Interface Declarations
// -----------------------------------------------------------------------------

interface_declaration ::=
		modifiers_opt INTERFACE name
		extends_interfaces_opt interface_body       ;

extends_interfaces_opt ::=
		extends_interfaces
	|	/* Epsilon */		;	

extends_interfaces ::=
		EXTENDS interface_type
	|	extends_interfaces COMMA interface_type       ;

interface_body ::= 
		LBRACE interface_member_declarations_opt RBRACE  ;

interface_member_declarations_opt ::=
		interface_member_declarations
	|	/* Epsilon */	             ;    

interface_member_declarations ::=
		interface_member_declaration         
	|	interface_member_declarations interface_member_declaration      ;

interface_member_declaration ::=
		constant_declaration     
	|	abstract_method_declaration    ;
		
constant_declaration ::=	field_declaration   ;

abstract_method_declaration ::=		modifiers_opt type name LPAREN formal_parameter_list_opt RPAREN SEMICOLON
	|	modifiers_opt VOID name LPAREN formal_parameter_list_opt RPAREN SEMICOLON     ;

// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.10) Arrays
// -----------------------------------------------------------------------------

array_initializer ::=   LBRACE variable_initializers_opt RBRACE       ;

variable_initializers_opt ::=   variable_initializers
	|	/* Epsilon */	;		

variable_initializers ::=		variable_initializer
	|	variable_initializers COMMA variable_initializer     ;


// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.11) Blocks and Statements
// -----------------------------------------------------------------------------

block ::=	        LBRACE block_statements_opt RBRACE    ;

block_statements_opt ::=
		block_statements 	
	|       /* Epsilon */       ;		

block_statements ::=
		block_statement  	
	|	block_statements block_statement        ;

block_statement ::=		local_variable_declaration SEMICOLON
	              |	statement               ;

local_variable_declaration ::=	type variable_declarators       ;

statement ::=		statement_without_trailing_substatement
	|	if_then_statement
	|	if_then_else_statement
	|	while_statement
	|	for_statement
    ;

statement_no_short_if ::=		statement_without_trailing_substatement
	|	if_then_else_statement_no_short_if
	|	while_statement_no_short_if
	|	for_statement_no_short_if
    ;    

statement_without_trailing_substatement ::=	block
	|	empty_statement
	|	expression_statement
	|	switch_statement
	|	do_statement
	|	break_statement
	|	continue_statement
	|	return_statement
    ;

empty_statement ::= 	SEMICOLON   ; 

expression_statement ::=    statement_expression SEMICOLON  ;

statement_expression ::=		assignment
	|	pre_increment_expression
	| 	pre_decrement_expression
	|	post_increment_expression
	|	post_decrement_expression
	|	method_invocation
	|	class_instance_creation_expression
    ; 

if_then_statement ::=	IF LPAREN expression RPAREN statement   ;

if_then_else_statement ::=		IF LPAREN expression RPAREN statement_no_short_if
		ELSE statement  ;

if_then_else_statement_no_short_if ::=
		IF LPAREN expression RPAREN statement_no_short_if
		ELSE statement_no_short_if    ;

do_statement ::=	DO statement WHILE LPAREN expression RPAREN SEMICOLON       ;

switch_statement ::=	SWITCH LPAREN expression RPAREN switch_block        ;

switch_block ::=    LBRACE switch_block_statement_groups_opt RBRACE           ;

switch_block_statement_groups_opt ::=		switch_block_statement_groups 
	|	/* Epsilon */			  ;

switch_block_statement_groups ::=		switch_block_statement_group
	|	switch_block_statement_groups switch_block_statement_group      ;

switch_block_statement_group ::=		switch_labels block_statements  ;

switch_labels ::=		switch_label			  
	|	switch_labels switch_label          ;

switch_label ::=		CASE constant_expression COLON
	|	DEFAULT COLON       ;

while_statement ::=
		WHILE LPAREN expression RPAREN statement    ;

while_statement_no_short_if ::= 	WHILE LPAREN expression RPAREN statement_no_short_if    ;

for_statement ::=		FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement   ;

for_statement_no_short_if ::=
		FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON
		for_update_opt RPAREN statement_no_short_if            ;
for_init_opt ::=
		for_init
	|       /* Epsilon */   ; 		

for_init ::=	
		statement_expression_list  
	|	local_variable_declaration          ; 

for_update_opt ::=
		for_update
	|       /* Epsilon */		;

for_update ::=	statement_expression_list       ; 

statement_expression_list ::=		statement_expression 	
	|	statement_expression_list COMMA statement_expression      ;

break_statement ::=		BREAK SEMICOLON   ;

continue_statement ::=   CONTINUE SEMICOLON   ;

return_statement ::=	RETURN expression_opt SEMICOLON     ;
// YOUR CODE HERE

// -----------------------------------------------------------------------------
// 19.12) Expressions
// -----------------------------------------------------------------------------

primary ::=
		primary_no_new_array
	|	array_creation_expression       ;

primary_no_new_array ::=	
		literal  			     
	|	THIS
	|	LPAREN expression RPAREN
	|	class_instance_creation_expression
	|	field_access
	|	method_invocation
	|	array_access            ;

class_instance_creation_expression ::=
		NEW class_type LPAREN argument_list_opt RPAREN      ;

argument_list_opt ::=
		argument_list
	|       /* Epsilon */       ;             

argument_list ::=
		expression	
	|	argument_list COMMA expression        ;

array_creation_expression ::=	NEW primitive_type dim_exprs dims_opt
	|	NEW class_or_interface_type dim_exprs dims_opt
	|	NEW primitive_type dims array_initializer
	|	NEW class_or_interface_type dims array_initializer        ;

dim_exprs ::=	dim_expr     	       	   
	|	dim_exprs dim_expr      ;	 

dim_expr ::=	LBRACK expression RBRACK      ;

dims_opt ::=
		dims			
	|	/* Epsilon */		;

dims ::=	        LBRACK RBRACK
     	|	dims LBRACK RBRACK        ;

field_access ::=		primary DOT name 	
	|	SUPER DOT name           
	|       name DOT name       ;       

method_invocation ::=   name LPAREN argument_list_opt RPAREN
        |	primary DOT name LPAREN argument_list_opt RPAREN
	|	SUPER DOT name LPAREN argument_list_opt RPAREN
	|	name DOT name LPAREN argument_list_opt RPAREN         ;

array_access ::=		name LBRACK expression RBRACK
	|	primary_no_new_array LBRACK expression RBRACK         ;

postfix_expression ::=		primary
 	|	post_increment_expression
	|	post_decrement_expression
	|       name                        ;

post_increment_expression ::=		postfix_expression PLUSPLUS     ;

post_decrement_expression ::=		postfix_expression MINUSMINUS     ;    

unary_expression ::=		pre_increment_expression
	|	pre_decrement_expression
	| 	PLUS unary_expression
	|	MINUS unary_expression
	|	unary_expression_not_plus_minus 
    ;
pre_increment_expression ::=		PLUSPLUS unary_expression   ;	

pre_decrement_expression ::=    	MINUSMINUS unary_expression   ;

unary_expression_not_plus_minus ::=		postfix_expression
	|	COMP unary_expression
	|	NOT unary_expression
	|	cast_expression
    ;
			 
cast_expression ::=		LPAREN expression RPAREN unary_expression_not_plus_minus
	|	LPAREN primitive_type RPAREN unary_expression     ;

multiplicative_expression ::=		unary_expression
	|	multiplicative_expression MULT unary_expression
	|	multiplicative_expression DIV unary_expression
	|	multiplicative_expression MOD unary_expression
    ;

additive_expression ::=		multiplicative_expression
	|	additive_expression PLUS multiplicative_expression
	|	additive_expression MINUS multiplicative_expression       ;
			
shift_expression ::=		additive_expression
	|	shift_expression LSHIFT additive_expression
	|	shift_expression RSHIFT additive_expression
	|	shift_expression RRSHIFT additive_expression
    ;
			
relational_expression ::=		shift_expression 
	|	relational_expression LT shift_expression
	|	relational_expression GT shift_expression
	|	relational_expression LTEQ shift_expression
	|	relational_expression GTEQ shift_expression
	|     	relational_expression INSTANCEOF name
    ; 
			
equality_expression ::=		relational_expression
	|	equality_expression EQEQ relational_expression
	|	equality_expression NOTEQ relational_expression
    ;
			
and_expression ::=		equality_expression
	|	and_expression AND equality_expression      ;
			
exclusive_or_expression ::=		and_expression
	|	exclusive_or_expression XOR and_expression  ;
			
inclusive_or_expression ::=		exclusive_or_expression 
	|	inclusive_or_expression OR exclusive_or_expression ;
			
conditional_and_expression ::=		inclusive_or_expression
	|	conditional_and_expression ANDAND inclusive_or_expression     ;
			
conditional_or_expression ::=		conditional_and_expression 
	|	conditional_or_expression OROR conditional_and_expression   ;
			
conditional_expression ::=		conditional_or_expression 
	|	conditional_or_expression QUEST expression COLON conditional_expression ;
			
assignment_expression ::=		conditional_expression 
	|	assignment
    ;
	
assignment ::=	left_hand_side assignment_operator assignment_expression    ;
		
assignment_operator ::=                EQ
        |       MULTEQ
        |       DIVEQ
        |       MODEQ
        |       PLUSEQ
        |       MINUSEQ
        |       LSHIFTEQ
        |       RSHIFTEQ
        |       RRSHIFTEQ
        |       ANDEQ
        |       XOREQ
        |       OREQ
        ;
               
left_hand_side ::=		name
	|	field_access
	|	array_access
    ;
	
	
expression_opt ::=		expression
	|       /* Epsilon */
    ; 
	
expression ::=		assignment_expression   ;

constant_expression ::=		expression      ;


// YOUR CODE HERE

// -----------------------------------------------------------------------------
// End of productions
// -----------------------------------------------------------------------------
