package AST;
import Utilities.Visitor;

/**
 * Node representing a field reference( Note, before the rewrite that
 * happens after phase 3 (See {@link
 * NameChecker.NameChecker#visitClassDecl(ClassDecl)}), field reference without
 * a target will be parsed as {@link NameExpr})<br>
 * Examples:<br>
 * <code>a.f</code><br>
 * <code>foo(5).g</code><br>
 * <code>this.myField</code>
 */
public class FieldRef extends Expression {

    /**
     * The type of the target. This is needed for code generation and
     * modifier checking.
     */
    public Type targetType; 

    /**
     * The declaration ({@link FieldDecl}) that this reference refers to.
     */
    public FieldDecl myDecl;

    /**
     * True, if this field reference was generated by the {@link Utilities.Rewrite}.
     * This is helpful for producing proper error messages for rewritten fields.
     */
    public boolean rewritten = false;

    /**
     * Constructs a field reference.
     * @param target The expression making up the target.
     * @param fieldName The name of the field.
     */
    public FieldRef(Expression target, Name fieldName) {
	super(fieldName);
	nchildren = 2;
	children = new AST[] { target, fieldName };
    }

    /**
     * Accessor for getting the target expression.
     * @return The expression making up the target of the field reference.
     */
    public Expression target() {
	return (Expression)children[0];
    }

    /**
     * Accessor for getting the field name.
     * @return The name of the field.
     */
    public Name fieldName()       { return (Name)children[1]; }

    /**
     * Returns true if the field is a constant. That is, if it is
     * static and final and the target is constant as well.
     * @return true if the field is a constant.
     */
    public boolean isConstant() {
	return target().isConstant() && myDecl.modifiers.isStatic() &&  myDecl.modifiers.isFinal();
    }

    /**
     * Returns the value of the constant value of the field. Should only ever be called if the field reference is constant.
     * @return The constant value of the field reference.
     */
    public Object constantValue() {
	return myDecl.var().init().constantValue();
    }

    /**
     * Calls {@link Visitor#visitFieldRef} on the visitor v.
     * @param v A reference to a Visitor object.
     * @return null
     */
    public Object visit(Visitor v) {
	return v.visitFieldRef(this);
    }
}
